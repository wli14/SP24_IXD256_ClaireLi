# using ADC input to control servo movement
# NOTE: servo.py file should be saved to hardware first

import os, sys, io
import M5
from M5 import *
from hardware import *
import time
from servo import Servo  # import servo.py

title0 = None
label0 = None
servo = None
light_sensor = None

program_state = 'rotating'

servo_val = 0

def setup():
  global title0, label0, servo, light_sensor, servo_val
  M5.begin()
  # display title ("title text", text offset, fg color, bg color, font):
  title0 = Widgets.Title("adc servo", 3, 0x000000, 0xffffff, Widgets.FONTS.DejaVu18)
  # display label ("label text", x, y, layer number, fg color, bg color, font):
  label0 = Widgets.Label("--", 3, 20, 1.0, 0xffffff, 0x000000, Widgets.FONTS.DejaVu18)
  # configure servo on pin 38:
  
  #servo.move(90)  # stop the servo
  #servo.move(60)
  # initialize analog to digital converter on pin 1:
  light_sensor = ADC(Pin(1), atten=ADC.ATTN_11DB)
  label0.setText(program_state)
  
  servo = Servo(pin=38)
  #servo.move(170)
  #servo.move(5)
  #servo.move(60)
  #time.sleep(2)
  #servo.move(170)
  servo_val = 120
  servo.move(servo_val)  #straight
  
  
# function to map input value range to output value range:
def map_value(in_val, in_min, in_max, out_min, out_max):
  out_val = out_min + (in_val - in_min) * (out_max - out_min) / (in_max - in_min)
  if out_val < out_min:
    out_val = out_min
  elif out_val > out_max:
    out_val = out_max
  return int(out_val)

def loop():
  global label0, program_state
  global servo_val
  
  M5.update()
  
  if (program_state == 'rotating'):
      # read 12-bit ADC value (0 - 4095 range):
      light_sensor_val = light_sensor.read()
      # convert ADC value from 0-4095 range to 0-180 range:
      servo_val_final = map_value(light_sensor_val, in_min=0, in_max=4095, out_min=60, out_max=170)
      print('servo_val_final =', servo_val_final)
  
      if(servo_val < servo_val_final):
          servo_val += 1
      elif(servo_val > servo_val_final):
          servo_val -= 1
      servo.move(servo_val)
      
      if (BtnA.wasPressed() == True):
          print('button pressed!')
          program_state = 'stop'
          print('program_state =', program_state)
          label0.setText(program_state)
          time.sleep(1)  # delay 1 second
          
  elif (program_state == 'stop'):
      if (BtnA.wasPressed() == True):
          print('button pressed!')
          program_state = 'rotating'
          print('program_state =', program_state)
          label0.setText(program_state)
          time.sleep(1)  # delay 1 second
          
  '''
  print('light_sensor_val =', light_sensor_val)
  if program_state == 'position1':
      if light_sensor_val > 2000:
          #print('servo_val =', servo_val)
          # move servo slowly clockwise:
          #servo.move(105) 
          #time.sleep_ms(500)
          # stop servo:
          #servo.move(90)
          for i in range(60, 120, 1):
              servo.move(i)
              time.sleep_ms(20)
          program_state = 'position2'
          print('program_state =', program_state)
          label0.setText(program_state)
  elif program_state == 'position2':
      if light_sensor_val < 2000:
          # move servo slowly clockwise:
          #servo.move(80) 
          #time.sleep_ms(500)
          # stop servo:
          #servo.move(90)
          #servo.move(60)
          for i in range(180, 60, -1):
              servo.move(i)
              time.sleep_ms(20)
          program_state = 'position1'
          print('program_state =', program_state)
          label0.setText(program_state)
  # display servo value on label0:
  #label0.setText(str(servo_val))
  '''
  time.sleep_ms(20)
  
if __name__ == '__main__':
  try:
    setup()
    while True:
      loop()
      pass
  except (Exception, KeyboardInterrupt) as e:
    try:
      from utility import print_error_msg
      print_error_msg(e)
    except ImportError:
      print("please update to latest firmware")
